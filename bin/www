#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('registration-service:server');
var http = require('http');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server and Socket.io server.
 */

var server = http.createServer(app);
var ioSocket = require("socket.io")(server);
var chatModel = require("../database/chatmodel.js");

/**
 * Listen on provided port, on all network interfaces.
 * Listen on the io socket.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

ioSocket.on("connection", function(socket){

  console.log("socket.id: "+socket.id);
  console.log("socket.rooms: "+JSON.stringify(socket.rooms));
  console.log("socket.handshake: "+JSON.stringify(socket.handshake));
  
  socket.on("chat_message", function(sessionId, msg){

    chatModel.create({sessionId: socket.handshake.address,message: msg}, function(error, result) {
      if(error) {
        console.log(JSON.stringify(error));
      }
      ioSocket.to(socket.id).emit("chat_message", socket.handshake.address, msg);
    });
  });
});

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
